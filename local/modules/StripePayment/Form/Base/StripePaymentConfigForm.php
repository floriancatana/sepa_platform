<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace StripePayment\Form\Base;

use StripePayment\StripePayment;
use Thelia\Form\BaseForm;
use StripePayment\Model\Config\StripePaymentConfigValue;
use Symfony\Component\Validator\Constraints\NotBlank;

/**
 * Class StripePaymentConfigForm
 * @package StripePayment\Form\Base
 * @author TheliaStudio
 */
class StripePaymentConfigForm extends BaseForm
{
    const FORM_NAME = "stripepayment_config_form";

    /**
     *
     * in this function you add all the fields you need for your Form.
     * Form this you have to call add method on $this->formBuilder attribute :
     *
     * $this->formBuilder->add("name", "text")
     *   ->add("email", "email", array(
     *           "attr" => array(
     *               "class" => "field"
     *           ),
     *           "label" => "email",
     *           "constraints" => array(
     *               new \Symfony\Component\Validator\Constraints\NotBlank()
     *           )
     *       )
     *   )
     *   ->add('age', 'integer');
     *
     * @return null
     */
    protected function buildForm()
    {
        $translationKeys = $this->getTranslationKeys();
        $fieldsIdKeys = $this->getFieldsIdKeys();

        $this->addEnabledField($translationKeys, $fieldsIdKeys);
        $this->addSecretKeyField($translationKeys, $fieldsIdKeys);
        $this->addPublishableKeyField($translationKeys, $fieldsIdKeys);
    }

    protected function addEnabledField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("enabled", "checkbox", array(
                "label" => $this->readKey("enabled", $translationKeys),
                "label_attr" => [
                    "for" => $this->readKey("enabled", $fieldsIdKeys),
                    "help" => $this->readKey("help.enabled", $translationKeys)
                ],
                "required" => false,
                "constraints" => array(
                ),
                "value" => StripePayment::getConfigValue(StripePaymentConfigValue::ENABLED, false),
            ))
        ;
    }

    protected function addSecretKeyField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("secret_key", "text", array(
                "label" => $this->readKey("secret_key", $translationKeys),
                "label_attr" => [
                    "for" => $this->readKey("secret_key", $fieldsIdKeys),
                    "help" => $this->readKey("help.secret_key", $translationKeys)
                ],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => StripePayment::getConfigValue(StripePaymentConfigValue::SECRET_KEY),
            ))
        ;
    }

    protected function addPublishableKeyField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("publishable_key", "text", array(
                "label" => $this->readKey("publishable_key", $translationKeys),
                "label_attr" => [
                    "for" => $this->readKey("publishable_key", $fieldsIdKeys),
                    "help" => $this->readKey("help.publishable_key", $translationKeys)
                ],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => StripePayment::getConfigValue(StripePaymentConfigValue::PUBLISHABLE_KEY),
            ))
        ;
    }

    public function getName()
    {
        return static::FORM_NAME;
    }

    public function readKey($key, array $keys, $default = '')
    {
        if (isset($keys[$key])) {
            return $keys[$key];
        }

        return $default;
    }

    public function getTranslationKeys()
    {
        return array();
    }

    public function getFieldsIdKeys()
    {
        return array(
            "enabled" => "enabled",
            "secret_key" => "secret_key",
            "publishable_key" => "publishable_key"
        );
    }
}
